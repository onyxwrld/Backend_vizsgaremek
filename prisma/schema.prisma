// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bicycle {
  id    Int         @id @default(autoincrement())
  type  BicycleType
  price Int
  reservationId Reservation[]
}

model Menu {
  id    Int    @id @default(autoincrement())
  name  String
  type  MenuType
  price Int
  basket Basket[] 
}

model Basket {
  id             Int @id @default(autoincrement()) 
  menu Menu[]
  user User @relation(fields: [userId],references: [id])
  userId  Int 
  deleted Boolean@default(false)
  deletedAt DateTime?
  reservation Reservation[]
}


model Reservation {
  id               Int              @id @default(autoincrement())
  user User @relation(fields: [user_id], references: [id])
  user_id          Int
   bicycle          Bicycle          @relation(fields: [bicycle_id], references: [id])
  bicycle_id     Int         
  start_time       String
  location String
  reservation_time ReservationTime
  state            ReservationState
  basket Basket @relation(fields: [basket_id], references: [id])
  basket_id Int
  total_amount Int //tárolt eljárás
}
model Opening{
  id Int @id @default(autoincrement())
  monday String
  tuesday String
  wednesday String
  thursday String
  friday String
  sasturday String
  sunday String
  torzsAdatok TorzsAdatok?
}
model Token{
  token String @id
  userId Int 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}
model TorzsAdatok {
  id Int @id @default(autoincrement())
  phone_number  String   
  email         String 
  opening_hours_id Int @unique
  opening Opening @relation(fields: [opening_hours_id],references: [id])
  location      String
  user User @relation(fields: [user_id], references: [id])
  user_id          Int
}

model User {
  id         Int    @id @default(autoincrement())
  reservationID Reservation[]
  tokens Token[]
  reviews Review[]
  torzsadatok TorzsAdatok[]
  basket Basket[]
  username   String @unique
  email      String @unique
  password   String @unique
  first_name String
  last_name  String
  role RoleType 
}
model Review{
    id         Int    @id @default(autoincrement())
    rate Int
    content String
    userId Int
    user User @relation(fields: [userId], references: [id],onDelete: Cascade)
}
enum ReservationTime {
  One
  Three
  Fives
}
enum MenuType {
    Drink
  Snack
}
enum RoleType {
  Admin
  User
}
enum ReservationState {
  Cancelled
  Pending
  Done
}

enum BicycleType {
  Small
  Medium
  Large
}

 enum EnumState {
  Active
  Passive
}
